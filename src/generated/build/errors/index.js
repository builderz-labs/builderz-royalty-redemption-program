"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.PublickeyMissmatchError = exports.NoMintMetadataError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * NoMintMetadata: 'No Mint Metadata'
 *
 * @category Errors
 * @category generated
 */
class NoMintMetadataError extends Error {
    constructor() {
        super('No Mint Metadata');
        this.code = 0x1770;
        this.name = 'NoMintMetadata';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NoMintMetadataError);
        }
    }
}
exports.NoMintMetadataError = NoMintMetadataError;
createErrorFromCodeLookup.set(0x1770, () => new NoMintMetadataError());
createErrorFromNameLookup.set('NoMintMetadata', () => new NoMintMetadataError());
/**
 * PublickeyMissmatch: 'Publickey Missmatch'
 *
 * @category Errors
 * @category generated
 */
class PublickeyMissmatchError extends Error {
    constructor() {
        super('Publickey Missmatch');
        this.code = 0x1771;
        this.name = 'PublickeyMissmatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PublickeyMissmatchError);
        }
    }
}
exports.PublickeyMissmatchError = PublickeyMissmatchError;
createErrorFromCodeLookup.set(0x1771, () => new PublickeyMissmatchError());
createErrorFromNameLookup.set('PublickeyMissmatch', () => new PublickeyMissmatchError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
